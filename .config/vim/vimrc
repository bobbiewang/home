" 基础设置 {

set nocompatible       "  关闭 vi 兼容模式

set ignorecase          " 搜索时忽略大小写
set smartcase           " 搜索时智能大小写判断，默认忽略大小写，除非搜索内容包含大写字母
set hlsearch            " 搜索时高亮显示匹配结果
set incsearch           " 搜索每输入一个字符，自动跳到第一个匹配的结果

set autoindent          " 开新行时复制上一行的缩进
set cindent             " 打开 C/C++ 语言自动缩进

set shiftwidth=4        " 用 >> 或 << 增加或减少一级缩进时的每级空格数 
set softtabstop=4       " 按下 Tab 键时对应的空格数
set tabstop=4           " 显示 Tab 字符时对应的空格数
set expandtab           " 自动将 Tab 转为空格

if has('folding')
  set foldenable        " 允许代码折叠
  set foldmethod=indent " 根据缩进折叠代码
  set foldlevel=99      " 默认打开所有折叠
endif

set lazyredraw          " 延迟绘制（提升性能）
set noswapfile          " 不创建交换文件
set autoread            " 文件发生外部改变时发出提示

set tags=./tags;,tags   " 从当前文件所在目录向上搜索 tags 文件，或 Vim 当前目录

augroup InitFileTypeGroup
  au!

  " C/C++ 文件使用 // 作为注释
  au FileType c,cpp setlocal commentstring=//\ %s

  " 设置某些扩展名的文件类型
  au BufNewFile,BufRead *.vm setlocal filetype=verilog
  au BufNewFile,BufRead *.vo setlocal filetype=verilog
augroup END

" }

" UI 设置 {

set background=dark
colorscheme wildcharm   " 内置的 slate、wildcharm 都可以

set laststatus=2        " 始终显示状态栏
set number              " 显示行号
set cursorline          " 突出显示当前行
set showcmd             " 在右下角显示命令
set showmatch           " 光标遇到括号时，自动高亮对应的另一个括号
set nowrap              " 关闭自动折行

if has('syntax')
  syntax enable
  syntax on             " 开启语法高亮
endif

set mouse=a             " 支持鼠标
set scrolloff=3         " 垂直滚动时，光标距离顶部或底部的行数
set sidescrolloff=10    " 水平滚动时，光标距离行首或行尾的字符数

set wildmenu            " 命令模式下，按 Tab 在上方显示所有可匹配清单
set wildmode=list:longest,full " 显示可匹配清单，匹配最长子串
set wildignore=*.o,*.obj       " 在文件匹配列表中忽略指定类型的文件

" }

" 编码设置 {

if has('multi_byte')
  " 内部工作编码
  set encoding=utf-8
  " 默认文件编码
  set fileencoding=utf-8
  " 打开文件时按照下面的顺序尝试编码
  set fileencodings=ucs-bom,utf-8,gbk,gb18030,big5,euc-jp,latin1
endif

" }

" 安装插件 {

" 自动下载 vim-plug 插件
let data_dir = has('nvim') ? stdpath('data') . '/site' : '~/.config/vim'
if empty(glob(data_dir . '/autoload/plug.vim'))
  silent execute '!curl -fLo '.data_dir.'/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin()

  " 全文快速移动
  Plug 'easymotion/vim-easymotion'

  " 自动高亮光标处单词
  Plug 'RRethy/vim-illuminate'

  " 文件模糊匹配，tags/函数名选择
  if has('python3')
    Plug 'Yggdroot/LeaderF', { 'do': ':LeaderfInstallCExtension' }
  else
    Plug 'ctrlpvim/ctrlp.vim'
  endif

  " 基于 ack/ag/pt/rg 进行文件搜索
  Plug 'dyng/ctrlsf.vim'

  " Statusline/Tabline 增强
  Plug 'itchyny/lightline.vim'

call plug#end()

" }

" 键绑定设置 {

let g:mapleader = "\<Space>"

nnoremap ; :
xnoremap ; :

nnoremap <esc> :nohl<cr>       " 搜索后按 ESC 去掉高亮


" }

" 插件设置 {

function! HasPlugin(name)
  return index(g:plugs_order, a:name) > 0
endfunction

if HasPlugin('vim-illuminate')
  let g:Illuminate_delay = 200
  augroup illuminate_augroup
    autocmd!
    autocmd VimEnter * hi illuminatedWord ctermfg=yellow ctermbg=darkgray
  augroup END
endif

if HasPlugin('LeaderF')
  let g:Lf_ShortcutF = "<leader>ff"
  noremap <leader>fb :<C-U><C-R>=printf("Leaderf buffer %s", "")<CR><CR>
  noremap <leader>fr :<C-U><C-R>=printf("Leaderf mru %s", "")<CR><CR>
  noremap <leader>ft :<C-U><C-R>=printf("Leaderf bufTag %s", "")<CR><CR>
  noremap <leader>fl :<C-U><C-R>=printf("Leaderf line %s", "")<CR><CR>
  noremap <leader>fr :<C-U><C-R>=printf("Leaderf! rg -e %s ", expand("<cword>"))<CR>
  noremap <leader>fgd :<C-U><C-R>=printf("Leaderf! gtags -d %s --auto-jump", expand("<cword>"))<CR><CR>
  noremap <leader>fgr :<C-U><C-R>=printf("Leaderf! gtags -r %s --auto-jump", expand("<cword>"))<CR><CR>
  noremap <leader>fgs :<C-U><C-R>=printf("Leaderf! gtags -s %s --auto-jump", expand("<cword>"))<CR><CR>
endif

if HasPlugin('ctrlsf.vim')
  let g:ctrlsf_auto_focus = { "at": "start" }
  let g:ctrlsf_auto_preview = 1

  noremap <leader>ss <Plug>CtrlSFPrompt
  noremap <leader>sw <Plug>CtrlSFCCwordPath
endif

" }

" vim: set softtabstop=2 foldmarker={,} foldlevel=0 foldmethod=marker:
